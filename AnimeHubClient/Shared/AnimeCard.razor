@inject NavigationManager Navigation
@inject IDialogService DialogService


<MudCard Class="anime-card" Style="position:relative; overflow:hidden;">
    @* <!-- Cover Image -->
    <MudCardMedia Image="@SafeImageUrl" Height="250" Class="cursor-pointer" />

    <!-- Overlay (hidden until hover) -->
    <div class="overlay" @onclick='() => Navigation.NavigateTo($"/anime/details/{Anime.Id}")'>
        <div class="overlay-content">
            <MudText Typo="Typo.subtitle2">@Anime.Title</MudText>
            <MudText Typo="Typo.caption">Ep: @Anime.Episodes | @Anime.YearPublished</MudText>
            <MudText Typo="Typo.caption">
                <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" /> @Anime.Rating
            </MudText>

        </div>
    </div> *@

    <div class="card-image-container">
        <MudImage Src="@SafeImageUrl" Alt="@Anime.Title" Width="100" Height="250" />
        <div class="overlay">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenQuickView(Anime))">
                Quick View
            </MudButton>
        </div>
    </div>

    <!-- Title below card -->
    <MudCardContent>
        <MudText Typo="Typo.body1" Class="cursor-pointer text-ellipsis" @onclick='() => Navigation.NavigateTo($"/anime/details/{Anime.Id}")' >
            @Anime.Title
        </MudText>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public AnimeReadDto Anime { get; set; } = new();

    private string SafeImageUrl => string.IsNullOrWhiteSpace(Anime.ImageUrl) ? "/images/placeholder.jpg" : Anime.ImageUrl;

    // [CascadingParameter] public IDialogService DialogService { get; set; } = default!;

    private void OpenQuickView(AnimeReadDto anime)
    {
        var parameters = new DialogParameters { { "Anime", anime } };
        DialogService.ShowAsync<AnimeQuickView>("Quick View", parameters);
    }
}
