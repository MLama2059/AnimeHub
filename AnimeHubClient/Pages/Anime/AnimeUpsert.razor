@page "/anime/create"
@page "/anime/update/{Id:int}"
@using AnimeHub.Shared.Models.Dtos.Anime
@using AnimeHub.Shared.Models.Dtos.Category
@using AnimeHub.Shared.Models.Dtos.Genre
@using AnimeHub.Shared.Models.Dtos.Studio
@using AnimeHub.Shared.Models.Enums
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@if (IsLoading)
{
    <div class="py-4 text-center"><MudProgressCircular Indeterminate="true" /></div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create") Anime</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Anime" FormName="AnimeUpsertForm" OnValidSubmit="UpsertAnime">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Anime.Title" class="form-control" id="Title"></InputText>
                        <label for="Title">Title</label>
                        <ValidationMessage For="@(() => Anime.Title)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputTextArea @bind-Value="Anime.Description" class="form-control" id="Description"></InputTextArea>
                        <label for="Description">Description</label>
                        <ValidationMessage For="@(() => Anime.Description)"></ValidationMessage>
                    </div>
                    <div class="form-floating mb-3 col-12">
                        @* <label class="mud-input-label">Studios</label> *@

                        <MudSelect T="int"
                                   Label="Studios"
                                   Variant="Variant.Outlined"
                                   SelectedValues="Anime.StudioIds"
                                   SelectedValuesChanged="@(vals => Anime.StudioIds = new HashSet<int>(vals))"
                                   MultiSelection="true"
                                   Margin="Margin.Dense"
                                   Clearable="true"
                                   ToStringFunc="@(new Func<int, string>(ConvertStudioIdToName))">

                            @if (Studios != null)
                            {
                                @foreach (var studio in Studios)
                                {
                                    <MudSelectItem T="int" Value="@studio.Id">@studio.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                        <ValidationMessage For="@(() => Anime.StudioIds)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputFile OnChange="OnFileSelected" id="AnimeImage" class="form-control pb-3" accept="image/x-png,image/jpeg" />
                        <label for="AnimeImage">Upload Image</label>
                    </div>

                    <!-- Preview -->
                    @if (!string.IsNullOrEmpty(PreviewImageUrl))
                    {
                        <div class="mt-3 text-center">
                            <img src="@PreviewImageUrl" class="img-fluid rounded shadow-sm" style="max-height:200px;" />
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(UploadedImageUrl))
                    {
                        <div class="mt-3 text-center">
                            <img src="@($"{ApiBaseUrl}{UploadedImageUrl}")" class="img-fluid rounded shadow-sm" style="max-height:200px;" />
                        </div>
                    }

                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Anime.Rating" class="form-control" id="Rating"></InputNumber>
                        <label for="Rating">Rating</label>
                        <ValidationMessage For="@(() => Anime.Rating)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Anime.Episodes" class="form-control" id="Episodes"></InputNumber>
                        <label for="Episodes">Episodes</label>
                        <ValidationMessage For="@(() => Anime.Episodes)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="Anime.Season" class="form-select" id="Season">
                            <option value="0" disabled>-- Select Season --</option>
                            @foreach (var seasonValue in Enum.GetValues(typeof(Season)))
                            {
                                <option value="@((int)seasonValue)">@seasonValue.ToString()</option>
                            }
                        </InputSelect>
                        <label for="Season">Season</label>
                        <ValidationMessage For="@(() => Anime.Season)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Anime.PremieredYear" class="form-control" id="PremieredYear"></InputNumber>
                        <label for="PremieredYear">Premiered</label>
                        <ValidationMessage For="@(() => Anime.PremieredYear)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <MudSelect T="Status"
                                   Label="Status"
                                   Variant="Variant.Outlined"
                                   @bind-Value="@AnimeStatusEnum">

                            @foreach (Status statusValue in Enum.GetValues(typeof(Status)))
                            {
                                <MudSelectItem Value="@statusValue">@GetEnumDisplayName(statusValue)</MudSelectItem>
                            }
                        </MudSelect>
                        @* <label for="Status">Status</label> *@
                        <ValidationMessage For="@(() => Anime.Status)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="Anime.CategoryId" class="form-select" id="Category">
                            <option value="0" disabled>-- Select Category --</option>
                            @if (Categories != null)
                            {
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            }
                        </InputSelect>
                        <label for="Category">Category</label>
                        <ValidationMessage For="@(() => Anime.CategoryId)"></ValidationMessage>
                    </div>
                    <div class="mb-3 col-12">
                        <label class="form-label">Genres</label>
                        @if (Genres != null)
                        {
                            <div class="row">
                                @foreach (var genre in Genres)
                                {
                                    <div class="col-6 col-sm-4 col-md-3 col-lg-2">
                                        <div class="form-check d-flex align-items-center">
                                            <input class="form-check-input me-2"
                                                   type="checkbox"
                                                   id="genre-@genre.Id"
                                                   value="@genre.Id"
                                                   checked="@Anime.GenreIds.Contains(genre.Id)"
                                                   @onchange="e => ToggleGenre(genre.Id, (bool)e.Value!)" />
                                            <label class="form-check-label" for="genre-@genre.Id">
                                                @genre.Name
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        <ValidationMessage For="@(() => Anime.GenreIds)" />
                    </div>

                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.LibraryAddCheck" Variant="Variant.Filled" Color="Color.Primary" Disabled="@IsLoading">@(Id > 0 ? "Update" : "Create")</MudButton>
                        </div>
                        <div class="col-6 col-md-3">
                            <MudButton Href="anime" StartIcon="@Icons.Material.Filled.ArrowCircleLeft" Variant="Variant.Filled" Color="Color.Default" Disabled="@IsLoading">Back to List</MudButton>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    // Single form model, can be either Create or Update DTO
    private AnimeUpdateDto Anime { get; set; } = new();

    private List<CategoryReadDto>? Categories;
    private List<GenreReadDto>? Genres { get; set; } = new();
    private List<StudioReadDto>? Studios { get; set; } = new();

    private bool IsLoading { get; set; } = true;

    private IBrowserFile? SelectedFile;
    private string? PreviewImageUrl;   // Base64 local preview
    private string? UploadedImageUrl;  // Server path from API
    private string? ApiBaseUrl { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        // Set the API base URL from the HttpClient
        ApiBaseUrl = Http.BaseAddress?.ToString();

        await LoadAnime();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task LoadAnime()
    {
        if (Id > 0)
        {
            var result = await Http.GetFromJsonAsync<AnimeReadDto>($"api/anime/{Id}");
            if (result != null)
            {
                Anime.Id = result.Id;
                Anime.Title = result.Title;
                Anime.Episodes = result.Episodes;
                Anime.Season = (int)Enum.Parse(typeof(Season), result.Season);
                Anime.PremieredYear = result.PremieredYear;
                Anime.Description = result.Description;
                Anime.ImageUrl = result.ImageUrl;
                Anime.Rating = result.Rating;
                Anime.Status = (int)Enum.Parse(typeof(Status), result.Status);
                Anime.CategoryId = result.CategoryId;
                Anime.GenreIds = result.GenreIds ?? new List<int>();
                Anime.StudioIds = result.StudioIds ?? new HashSet<int>();

                // Ensure the path uses forward slashes for web access
                UploadedImageUrl = result.ImageUrl?.Replace("\\", "/");
            }
        }
        else // Handle case for new anime creation (Id == 0)
        {
            // Reset the Anime object and image URLs for a new entry
            Anime = new AnimeUpdateDto
            {
                GenreIds = new List<int>(),
                StudioIds = new HashSet<int>()
            };
            PreviewImageUrl = null;
            UploadedImageUrl = null;
        }

        Categories = await Http.GetFromJsonAsync<List<CategoryReadDto>>("api/category");
        var genres = await Http.GetFromJsonAsync<List<GenreReadDto>>("api/genre");
        var studios = await Http.GetFromJsonAsync<List<StudioReadDto>>("api/studio");

        if (Genres != null)
        {
            Genres = genres.OrderBy(g => g.Name).ToList();
        }

        if (Studios != null)
        {
            Studios = studios.OrderBy(s => s.Name).ToList();
        }
    }

    private async Task UpsertAnime()
    {
        IsLoading = true;

        try
        {
            // Check if a new file has been selected
            if (SelectedFile != null)
            {
                // Create a byte array with the file's size
                var buffer = new byte[(int)SelectedFile.Size];

                // Read the file stream into the buffer
                await SelectedFile.OpenReadStream(5 * 1024 * 1024).ReadAsync(buffer);

                var content = new MultipartFormDataContent();
                var fileContent = new ByteArrayContent(buffer);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(SelectedFile.ContentType);
                content.Add(fileContent, "file", SelectedFile.Name);

                // Send the existing image URL to the API as a query parameter
                // This URL will be null on a new create, and the old path on an update.
                string oldImageUrlParam = string.IsNullOrEmpty(Anime.ImageUrl) ? "" : $"&oldImageUrl={Uri.EscapeDataString(Anime.ImageUrl)}";

                // Upload the new image to the API
                var response = await Http.PostAsync($"api/anime/upload-image?{oldImageUrlParam}", content);

                if (response.IsSuccessStatusCode)
                {
                    // Get the new image path from the API
                    UploadedImageUrl = await response.Content.ReadAsStringAsync();
                    Anime.ImageUrl = UploadedImageUrl;
                }
                else
                {
                    Snackbar.Add("Image upload failed.", Severity.Error);
                    IsLoading = false;
                    return; // Stop the process if image upload fails
                }
            }
            else
            {
                // If no new file, retain the existing ImageUrl from the loaded Anime object
                // This is crucial for updates where the user doesn't change the image
                Anime.ImageUrl = UploadedImageUrl;
            }

            if (Id == 0)
            {
                // Create
                var response = await Http.PostAsJsonAsync("api/anime", new AnimeCreateDto
                {
                    Title = Anime.Title,
                    Description = Anime.Description,
                    Episodes = Anime.Episodes,
                    Season = Anime.Season,
                    PremieredYear = Anime.PremieredYear,
                    ImageUrl = Anime.ImageUrl,
                    Rating = Anime.Rating,
                    Status = Anime.Status,
                    CategoryId = Anime.CategoryId,
                    GenreIds = Anime.GenreIds,
                    StudioIds = Anime.StudioIds
                });

                if (response.IsSuccessStatusCode)
                    Snackbar.Add("Anime created successfully.", Severity.Success);
                else
                    Snackbar.Add("Failed to create anime.", Severity.Error);
            }
            else
            {
                // Update
                var response = await Http.PutAsJsonAsync($"api/anime/{Anime.Id}", Anime);

                if (response.IsSuccessStatusCode)
                    Snackbar.Add("Anime updated successfully.", Severity.Success);
                else
                    Snackbar.Add("Failed to update anime.", Severity.Error);
            }
        }
        finally
        {
            IsLoading = false; 
        }

        Navigation.NavigateTo("anime");
    }

    private void ToggleGenre(int genreId, bool isChecked)
    {
        if (isChecked)
        {
            if (!Anime.GenreIds.Contains(genreId))
                Anime.GenreIds.Add(genreId);
        }
        else
        {
            Anime.GenreIds.Remove(genreId);
        }
    }

    private string ConvertStudioIdToName(int id)
    {
        // Find the studio object corresponding to the ID and return its Name.
        // Use a default value if the studio isn't found (e.g., for safety).
        return Studios?.FirstOrDefault(s => s.Id == id)?.Name ?? $"ID {id}";
    }

    private Status AnimeStatusEnum
    {
        get => (Status)Anime.Status;
        set => Anime.Status = (int)value;
    }

    // Inside the @code block of AnimeUpsert.razor

    private string GetEnumDisplayName(Enum enumValue)
    {
        // Use reflection to get the MemberInfo for the enum value
        var memberInfo = enumValue.GetType().GetMember(enumValue.ToString()).FirstOrDefault();

        if (memberInfo == null)
        {
            return enumValue.ToString(); // Fallback to raw string
        }

        // Check if the DisplayAttribute is present
        var displayAttribute = memberInfo.GetCustomAttributes(typeof(DisplayAttribute), false)
                                         .OfType<DisplayAttribute>()
                                         .FirstOrDefault();

        // Return the Name from the DisplayAttribute, or fallback to raw string
        return displayAttribute?.Name ?? enumValue.ToString();
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;

        if (SelectedFile == null)
            return;

        if (!SelectedFile.ContentType.StartsWith("image/"))
        {
            Snackbar.Add("Please select a valid image file.", Severity.Warning);
            return;
        }

        if (SelectedFile.Size > 5 * 1024 * 1024)
        {
            Snackbar.Add("File size exceeds 5 MB.", Severity.Warning);
            return;
        }

        // Base 64 Preview
        var buffer = new byte[(int)SelectedFile.Size];
        await SelectedFile.OpenReadStream(5 * 1024 * 1024).ReadAsync(buffer); // 5MB max
        PreviewImageUrl = $"data:{SelectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";

        UploadedImageUrl = null; // Reset uploaded URL until upload completes
    }
}
