@page "/category"
@using AnimeHub.Shared.Models.Dtos.Category
@using AnimeHubClient.Shared
@inject HttpClient Http
@inject IDialogService Dialog
@inject ISnackbar Snackbar

@if (IsLoading)
{
    <div class="py-4 text-center"><MudProgressCircular Indeterminate="true" /></div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Category List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="col-12 text-end">
                <MudButton Href="category/create" StartIcon="@Icons.Material.Filled.AddTask" Variant="Variant.Filled" Color="Color.Primary">Add New Category</MudButton>
            </div>
        </div>
        @if (Categories != null && Categories.Any())
        {
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in Categories)
                    {
                        <tr>
                            <td>
                                @category.Name
                            </td>
                            <td>
                                <MudButton Href="@($"category/update/{category.Id}")" StartIcon="@Icons.Material.Filled.EditNote" Variant="Variant.Filled" Color="Color.Primary">Edit</MudButton>
                                <MudButton @onclick="() => DeleteCategory(category.Id)" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

@code {
    private bool IsLoading { get; set; } = true;
    private List<CategoryReadDto>? Categories;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            Categories = await Http.GetFromJsonAsync<List<CategoryReadDto>>("api/category");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching category data: {ex.Message}");
        }
    }

    private async Task DeleteCategory(int id)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.ContentText, "Are you sure you want to delete?"  },
            { x => x.ButtonText, "Delete" }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraLarge,  // keeps the dialog compact
            FullWidth = false,  // lets it size naturally
        };

        var dialog = await Dialog.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Call API to delete
            var response = await Http.DeleteAsync($"api/category/{id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Category deleted successfully!", Severity.Success);
                await LoadCategories(); // Reload list
            }
            else
            {
                Snackbar.Add("Failed to delete category.", Severity.Error);
            }
        }
    }
}
