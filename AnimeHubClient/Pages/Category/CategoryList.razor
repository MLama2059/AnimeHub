@page "/category"
@using AnimeHub.Shared.Models.Dtos.Category
@using AnimeHubClient.Shared
@inject HttpClient Http
@inject IDialogService Dialog
@inject ISnackbar Snackbar

@if (IsLoading)
{
    <div class="py-4 text-center"><MudProgressCircular Indeterminate="true" /></div>
}
else
{
    <MudCard Elevation="4" Class="mt-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Align="Align.Center" Typo="Typo.h4" Class="fw-bold">Category List</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <div class="mb-4 text-end">
                <MudButton Href="category/create" StartIcon="@Icons.Material.Filled.AddTask" Variant="Variant.Filled" Color="Color.Primary">Add New Category</MudButton>
            </div>

            @if (Categories != null && Categories.Any())
            {
                <MudTable Items="Categories" Hover="true" Bordered="true" Striped="true" Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh Style="width:1%;">Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Actions" Style="white-space:nowrap;">
                            <MudButton Href="@($"category/update/{context.Id}")" StartIcon="@Icons.Material.Filled.EditNote" Variant="Variant.Filled" Color="Color.Primary" Class="me-2">Edit</MudButton>
                            <MudButton @onclick="() => DeleteCategory(context.Id)" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudCardContent>
</MudCard>
}

@code {
    private bool IsLoading { get; set; } = true;
    private List<CategoryReadDto>? Categories;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task LoadCategories()
    {
        try
        {
            Categories = await Http.GetFromJsonAsync<List<CategoryReadDto>>("api/category");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching category data: {ex.Message}");
        }
    }

    private async Task DeleteCategory(int id)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.ContentText, "Are you sure you want to delete?"  },
            { x => x.ButtonText, "Delete" }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraLarge,  // keeps the dialog compact
            FullWidth = false,  // lets it size naturally
        };

        var dialog = await Dialog.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Call API to delete
            var response = await Http.DeleteAsync($"api/category/{id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Category deleted successfully!", Severity.Success);
                await LoadCategories(); // Reload list
            }
            else
            {
                Snackbar.Add("Failed to delete category.", Severity.Error);
            }
        }
    }
}
