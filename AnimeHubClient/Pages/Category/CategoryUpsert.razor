@page "/category/create"
@page "/category/update/{Id:int}"
@using AnimeHub.Shared.Models.Dtos.Category
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@if (IsLoading)
{
    <div class="py-4 text-center"><MudProgressCircular Indeterminate="true" /></div>

}
else
{
    <MudCard Elevation="4" Class="mt-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Align="Align.Center" Typo="Typo.h4" Class="fw-bold">@(Id > 0 ? "Update" : "Create") Category</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />

                <MudTextField Variant="Variant.Outlined" Label="Category Name" @bind-Value="Category.Name" For="@(() => Category.Name)" Class="mb-4" />

                <MudCardActions>
                    <MudGrid Justify="Justify.Center" Class="px-2">
                        <MudItem xs="12" sm="6">
                            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.LibraryAddCheck" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@IsLoading">@(Id > 0 ? "Update" : "Create")</MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudButton Href="category" StartIcon="@Icons.Material.Filled.ArrowCircleLeft" Variant="Variant.Filled" Color="Color.Default" FullWidth="true" Disabled="@IsLoading">Back to List</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardActions>
            </EditForm>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter]
    public int Id { get; set; }

    // Single form model, can be either Create or Update DTO
    private CategoryUpdateDto Category { get; set; } = new();

    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task LoadCategory()
    {
        if (Id > 0)
        {
            var result = await Http.GetFromJsonAsync<CategoryReadDto>($"api/category/{Id}");
            if (result != null)
            {
                Category.Id = result.Id;
                Category.Name = result.Name;
            }
        }
    }

    private async Task UpsertCategory()
    {
        IsLoading = true;

        try
        {
            if (Id == 0)
            {
                // Create
                await Http.PostAsJsonAsync("api/Category", new CategoryCreateDto { Name = Category.Name });
                Snackbar.Add("Category created successfully.", Severity.Success);
            }
            else
            {
                // Update
                await Http.PutAsJsonAsync($"api/category/{Category.Id}", Category);
                Snackbar.Add("Category updated successfully.", Severity.Success);
            } 
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occured: {ex.Message}", Severity.Error);
        }

        IsLoading = false;
        Navigation.NavigateTo("category");
    }
}
