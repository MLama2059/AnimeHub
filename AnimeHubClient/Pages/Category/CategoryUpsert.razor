@page "/category/create"
@page "/category/update/{Id:int}"
@using AnimeHub.Shared.Models.Dtos.Category
@inject HttpClient Http
@inject NavigationManager Navigation

@if (IsProcessing)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create") Category</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Category.Name" class="form-control" id="Name"></InputText>
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Category.Name)"></ValidationMessage>
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-bookmark-check"></i> @(Id > 0 ? "Update" : "Create")
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="category" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-box-arrow-in-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    // Single form model, can be either Create or Update DTO
    private CategoryUpdateDto Category { get; set; } = new();

    private bool IsProcessing { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategory();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategory()
    {
        if (Id > 0)
        {
            var result = await Http.GetFromJsonAsync<CategoryReadDto>($"api/category/{Id}");
            if (result != null)
            {
                Category.Id = result.Id;
                Category.Name = result.Name;
            }
        }
    }

    private async Task UpsertCategory()
    {
        IsProcessing = true;
        if (Id == 0)
        {
            // Create
            await Http.PostAsJsonAsync("api/Category", new CategoryCreateDto { Name = Category.Name });
        }
        else
        {
            // Update
            await Http.PutAsJsonAsync($"api/category/{Category.Id}", Category);
        }
        IsProcessing = false;
        Navigation.NavigateTo("category");
    }
}
