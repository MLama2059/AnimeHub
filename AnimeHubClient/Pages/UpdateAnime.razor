@page "/update-anime/{Id:int}"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Update Anime</h3>

@if (anime == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@anime" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="title">Title:</label>
            <InputText id="title" @bind-Value="anime.Title" class="form-control"></InputText>
        </div>
        <div class="mt-2">
            <label for="genre">Genre:</label>
            <InputText id="genre" @bind-Value="anime.Genre" class="form-control"></InputText>
        </div>
        <div class="mt-2">
            <label for="episodes">Episodes:</label>
            <InputNumber id="episodes" @bind-Value="anime.Episodes" class="form-control"></InputNumber>
        </div>
        <div class="mt-2">
            <label for="yearPublished">Year Published:</label>
            <InputNumber id="yearPublished" @bind-Value="anime.YearPublished" class="form-control"></InputNumber>
        </div>
    
        <button type="submit" class="btn btn-primary mt-3">Save Changes</button>

    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Anime? anime;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the existing anime data from the API based on the ID from the URL
        try
        {
            anime = await Http.GetFromJsonAsync<Anime>($"api/anime/{Id}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to fetch anime: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        await Http.PutAsJsonAsync($"api/anime/{anime!.Id}", anime);
        Navigation.NavigateTo("fetchanime");
    }
}
